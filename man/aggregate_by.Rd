% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate_by.R
\name{aggregate_by}
\alias{aggregate_by}
\title{Aggregating observations on some variables}
\usage{
aggregate_by(df, col_name, ..., .funs = sum)
}
\arguments{
\item{df}{the data frame on which to perform the aggregation.}

\item{col_name}{the variable on which to perform the aggregation.}

\item{...}{others variables passed on to `group_by`.}

\item{.funs}{the name of a function given as a name, literal character
string or a list of names or character strings. See \code{Details} for
more information on the specific usage. By default \code{sum}.}
}
\value{
A data frame with the same variables as \code{df} but for which some
of the observation have been aggregated (i.e. less rows than in \code{df}).
}
\description{
\code{aggregate_by} aggregates some variables of a data frame according to
the values of a categorical variable of the same data frame and using a given
function for the aggregation.
}
\details{
On a data frame that contains the values of the categorical variable to
aggregate (\code{col_name}, \code{...}), the function performs a
\code{\link[dplyr]{group_by}} followed by a \code{\link[dplyr]{summarise}}
with the function(s) \code{.funs}.\cr
The \code{.funs} arguments can be inputed with or without quotation as one
function, for example: \code{.funs = sum} or \code{.funs = "sum"} or a list
of multiple function, for example: \code{.funs = list(sum, mean)} or
\code{.funs = list("sum", "mean")}. See
\code{vignette("aggregating_observations")} for usage. In case of multiple
functions or function for a specific column (example: \code{sum(COLNAME)})
inputed, the function will be the name of the variable in the result.
}
\examples{
library(dplyr)

## A toy data frame:
set.seed(30101976)
data <- expand.grid(letters[1:3], 1:3, 4:6)
data$Var4 <- sample(1:100, nrow(data), TRUE)
data$Var5 <- sample(1:100, nrow(data), TRUE)
data$Var6 <- sample(1:100, nrow(data), TRUE)

## Aggregating the values "a" and "b" of the categorical variable Var1,
## summing the values of variables Var4, Var5, Var6 (i.e. all the variables
## that are not in the arguments of the function call):
data \%>\%
  mutate(Var1 = recode(Var1, a = "b")) \%>\%
  aggregate_by(Var1, Var2, Var3)

## To calculate the mean value:
data \%>\%
  mutate(Var1 = recode(Var1, a = "b")) \%>\%
  aggregate_by(Var1, Var2, Var3, .funs = mean)

## or to apply it to all the columns:
data \%>\%
  mutate(Var1 = recode(Var1, a = "b")) \%>\%
  aggregate_by(Var1, Var2, Var3, .funs = list(sum, mean))

## To calculate the mean and the sum:
data \%>\%
  mutate(Var1 = recode(Var1, a = "b")) \%>\%
  aggregate_by(Var1, Var2, Var3, .funs = list(sum(Var6), mean(Var4)))
}
\author{
Marc Choisy and Lucie Contamin.
}
